{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","email","name","id","username","react_default","a","createElement","className","src","concat","alt","CardList","cardComponent","cats","map","user","i","src_Components_Card","key","Searchbox","searchChange","searchText","onChange","placeholder","type","Scroll","props","style","overflowY","border","maxHeight","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearch","event","setState","filteredCats","target","value","state","_this2","fetch","then","res","json","_this3","filteredSearch","filter","filtered","toLowerCase","includes","length","Components_Searchbox","Components_Scroll","Components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAmBeA,SAfF,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,GAAIC,EAAcJ,EAAdI,SAC5B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAG,+BAAAC,OAAiCP,GAAMQ,IAAI,KACnEN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIN,GACJI,EAAAC,EAAAC,cAAA,SAAIH,OCMLQ,EAdE,SAAAZ,GAAY,IAEnBa,EAFmBb,EAAVc,KAEYC,IAAI,SAACC,EAAMC,GAClC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKH,EAAKb,GAAIA,GAAIa,EAAKb,GAAID,KAAMc,EAAKd,KAAME,SAAUY,EAAKZ,SAAUH,MAAOe,EAAKf,UAGlG,OACEI,EAAAC,EAAAC,cAAA,WACKM,ICAIO,EATG,SAAApB,GAAgC,IAA9BqB,EAA8BrB,EAA9BqB,aAA8BrB,EAAhBsB,WAC9B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOgB,SAAUF,EAAcb,UAAU,qCAAqCgB,YAAY,eAAeC,KAAK,aCM3GC,EARA,SAACC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,6BAA8BC,UAAW,UAC9EJ,EAAMK,WC8CJC,qBA3CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeJI,SAAW,SAACC,GACRR,EAAKS,SAAS,CAACC,aAAcF,EAAMG,OAAOC,SAf1CZ,EAAKa,MAAQ,CACTjC,KAAM,GACN8B,aAAc,IAJTV,mFAQM,IAAAc,EAAAX,KACfY,MAAM,8CACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACfF,KAAK,SAAAC,GACHH,EAAKL,SAAS,CAAC7B,KAAMqC,uCAUpB,IAAAE,EAAAhB,KACCiB,EAAiBjB,KAAKU,MAAMjC,KAAKyC,OAAO,SAAAC,GAC1C,OAAOA,EAAStD,KAAKuD,cAAcC,SAASL,EAAKN,MAAMH,aAAaa,iBAGrE,OAA8B,IAA3BpB,KAAKU,MAAMjC,KAAK6C,OACRtD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,oBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,0BACIF,EAAAC,EAAAC,cAACqD,EAAD,CAAWvC,aAAgBgB,KAAKI,WAChCpC,EAAAC,EAAAC,cAACsD,EAAD,KACIxD,EAAAC,EAAAC,cAACuD,EAAD,CAAUhD,KAAMwC,aApC1BS,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOlE,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAACiE,EAAD,OACAC,SAASC,eAAe,SDmH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.d764a2d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = ({email, name, id, username}) => {\r\n    return(\r\n        <div className=\" tc bg-light-purple dib br2 pa3 ma2 grow bw2 shadow-5\">\r\n            <img className=\"br2\" src={`https://cataas.com/cat/says/${id}`} alt=\"\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>{username}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({cats}) => {\r\n    \r\n    const cardComponent = cats.map((user, i) => {\r\n        return <Card key={user.id} id={user.id} name={user.name} username={user.username} email={user.email}></Card>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n          {cardComponent}\r\n      </div>  \r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange, searchText}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input onChange={searchChange} className=\"pa3 ba b--purple bg-lightest-blue \" placeholder='Search here!' type=\"search\"></input>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '3px solid rgba(255,0,0,.2)', maxHeight: '460px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from './Components/CardList';\r\nimport Searchbox from './Components/Searchbox';\r\nimport Scroll from './Components/Scroll';\r\n// import * as catsData from './Cats';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            cats: [],\r\n            filteredCats: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json()\r\n        ).then(res => {\r\n            this.setState({cats: res})\r\n        })\r\n    }\r\n\r\n    onSearch = (event) => {\r\n        this.setState({filteredCats: event.target.value});\r\n        // console.log(this.state.filteredCats)\r\n    }\r\n\r\n    \r\n    render() {\r\n        const filteredSearch = this.state.cats.filter(filtered => {\r\n            return filtered.name.toLowerCase().includes(this.state.filteredCats.toLowerCase()); \r\n        });\r\n        // console.log(filteredSearch)\\\r\n           if(this.state.cats.length === 0){\r\n               return <h1 className=\"tc\">Still loading...</h1>\r\n           }else{\r\n               return (\r\n                    <div className=\"tc\">\r\n                    <h1>Cats Picture</h1>\r\n                        <Searchbox searchChange = {this.onSearch}></Searchbox>\r\n                        <Scroll>\r\n                            <CardList cats={filteredSearch}></CardList>\r\n                        </Scroll>\r\n                    </div> \r\n                )  \r\n           }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<div>\n        <App/>\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}